/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "PulseReaderInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{
namespace module
{
namespace pulsereader
{

void PulseReaderMethodSetOverlay::invoke (std::shared_ptr<PulseReader> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method PulseReader::setOverlay");
  }

  return obj->setOverlay (overlaySet);
}

void PulseReaderMethodSetOverlay::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (overlaySet);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("overlaySet") || !s.JsonValue["overlaySet"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'overlaySet' parameter should be a boolean");
    }

    s.SerializeNVP (overlaySet);

  }
}

void PulseReaderMethodSetId::invoke (std::shared_ptr<PulseReader> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method PulseReader::setId");
  }

  return obj->setId (id);
}

void PulseReaderMethodSetId::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (id);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("id") || !s.JsonValue["id"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'id' parameter should be a integer");
    }

    s.SerializeNVP (id);

  }
}

std::shared_ptr<MediaPipeline> PulseReaderConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

int PulseReaderConstructor::getId ()
{
  if (!__isSetId && !__isSetDefaultId) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "0";

      reader.parse (defaultValue, s.JsonValue["id"]);
      s.SerializeNVP (id);
      __isSetDefaultId = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value id of PulseReader constructor, check your module: " << e.what() << std::endl;
    }
  }

  return id;
}

bool PulseReaderConstructor::getOverlay ()
{
  if (!__isSetOverlay && !__isSetDefaultOverlay) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "false";

      reader.parse (defaultValue, s.JsonValue["overlay"]);
      s.SerializeNVP (overlay);
      __isSetDefaultOverlay = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value overlay of PulseReader constructor, check your module: " << e.what() << std::endl;
    }
  }

  return overlay;
}

void PulseReaderConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    if (__isSetId) {
      s.SerializeNVP (id);
    }

    if (__isSetOverlay) {
      s.SerializeNVP (overlay);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (s.JsonValue.isMember ("id") ) {
      if (s.JsonValue["id"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetId = true;
        s.SerializeNVP (id);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'id' parameter should be a integer");
      }
    }

    if (s.JsonValue.isMember ("overlay") ) {
      if (s.JsonValue["overlay"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetOverlay = true;
        s.SerializeNVP (overlay);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'overlay' parameter should be a boolean");
      }
    }

  }
}

} /* pulsereader */
} /* module */
} /* kurento */
