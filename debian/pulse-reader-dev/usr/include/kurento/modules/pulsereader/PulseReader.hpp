/* Autogenerated with kurento-module-creator */

#ifndef __PULSE_READER_HPP__
#define __PULSE_READER_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include <vector>
#include "OpenCVFilter.hpp"
#include "PulseDetected.hpp"
#include "PulseUndetected.hpp"
#include "FrameData.hpp"
#include <sigc++/sigc++.h>

namespace kurento
{
namespace module
{
namespace pulsereader
{
class PulseReader;
} /* pulsereader */
} /* module */
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::module::pulsereader::PulseReader> &object, JsonSerializer &serializer);
}

namespace kurento
{
class MediaPipeline;
} /* kurento */

namespace kurento
{
namespace module
{
namespace pulsereader
{
class PulseReader : public virtual OpenCVFilter
{

public:
  PulseReader () {};
  virtual ~PulseReader () {};

  virtual void setOverlay (bool overlaySet) = 0;
  virtual void setId (int id) = 0;

  virtual const std::string& getType () const;
  virtual const std::string& getQualifiedType () const;
  virtual const std::string& getModule () const;
  virtual const std::vector<std::string>& getHierarchy () const;

  virtual void Serialize (JsonSerializer &serializer) = 0;

};

} /* pulsereader */
} /* module */
} /* kurento */

#endif /*  __PULSE_READER_HPP__ */
