/* Autogenerated with kurento-module-creator */

#ifndef __PULSE_READER_IMPL_HPP__
#define __PULSE_READER_IMPL_HPP__

#include "OpenCVFilterImpl.hpp"
#include "PulseReader.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>
#include "PulseReaderOpenCVImpl.hpp"

namespace kurento
{
namespace module
{
namespace pulsereader
{
class PulseReaderImpl;
} /* pulsereader */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::pulsereader::PulseReaderImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace pulsereader
{

class PulseReaderImpl : public OpenCVFilterImpl, public virtual PulseReader, public virtual PulseReaderOpenCVImpl
{

public:
  PulseReaderImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline, int id, bool overlay);

  virtual ~PulseReaderImpl ();

  void setOverlay (bool overlaySet);
  void setId (int id);

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);

protected:
  virtual void postConstructor ();

private:
  double pulse = 0;
  bool existsPulse = false;
  std::string data;
  int id;

  GstElement *pulsereader;
  guint64 lastTs = G_GUINT64_CONSTANT(0);
  gulong bus_handler_id;
  void busMessage (GstMessage *message);
  void dataUpdate (int id, double bpm, std::string data);

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  static StaticConstructor staticConstructor;

};

} /* pulsereader */
} /* module */
} /* kurento */

#endif /*  __PULSE_READER_IMPL_HPP__ */
