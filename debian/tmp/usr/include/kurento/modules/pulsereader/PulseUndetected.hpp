/* Autogenerated with kurento-module-creator */

#ifndef __PULSE_UNDETECTED_HPP__
#define __PULSE_UNDETECTED_HPP__

#include <json/json.h>
#include <memory>
#include "Media.hpp"

namespace kurento
{
namespace module
{
namespace pulsereader
{
class PulseUndetected;
} /* pulsereader */
} /* module */
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::module::pulsereader::PulseUndetected> &object, JsonSerializer &s);
}


namespace kurento
{
namespace module
{
namespace pulsereader
{

class PulseUndetected : public Media
{

public:

  PulseUndetected (std::shared_ptr<MediaObject> source, const std::string &type, int time, const std::string &data) : Media (source, type) {
      this->time = time;
      this->data = data;
  };

  PulseUndetected (const PulseUndetected &copy) : Media (copy) {
      this->time = copy.time;
      this->data = copy.data;
  };

  PulseUndetected (const Json::Value &value);

  virtual void setTime (int time) {
    this->time = time;
  };

  virtual int getTime () {
    return time;
  };

  virtual void setData (const std::string &data) {
    this->data = data;
  };

  virtual const std::string &getData () {
    return data;
  };

  static std::string getName() {
    return "PulseUndetected";
  }

  virtual void Serialize (JsonSerializer &s);

protected:

  PulseUndetected() {};

private:
  int time;
  std::string data;

  friend void kurento::Serialize (std::shared_ptr<kurento::module::pulsereader::PulseUndetected> &event, JsonSerializer &s);
};

} /* pulsereader */
} /* module */
} /* kurento */

#endif /*  __PULSE_UNDETECTED_HPP__ */
