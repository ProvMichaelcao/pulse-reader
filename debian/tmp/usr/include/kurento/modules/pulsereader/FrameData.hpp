/* Autogenerated with kurento-module-creator */

#ifndef __FRAME_DATA_HPP__
#define __FRAME_DATA_HPP__

#include <json/json.h>
#include <memory>
#include "Media.hpp"

namespace kurento
{
namespace module
{
namespace pulsereader
{
class FrameData;
} /* pulsereader */
} /* module */
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::module::pulsereader::FrameData> &object, JsonSerializer &s);
}


namespace kurento
{
namespace module
{
namespace pulsereader
{

class FrameData : public Media
{

public:

  FrameData (std::shared_ptr<MediaObject> source, const std::string &type, float bpm, int id, const std::string &data) : Media (source, type) {
      this->bpm = bpm;
      this->id = id;
      this->data = data;
  };

  FrameData (const FrameData &copy) : Media (copy) {
      this->bpm = copy.bpm;
      this->id = copy.id;
      this->data = copy.data;
  };

  FrameData (const Json::Value &value);

  virtual void setBpm (float bpm) {
    this->bpm = bpm;
  };

  virtual float getBpm () {
    return bpm;
  };

  virtual void setId (int id) {
    this->id = id;
  };

  virtual int getId () {
    return id;
  };

  virtual void setData (const std::string &data) {
    this->data = data;
  };

  virtual const std::string &getData () {
    return data;
  };

  static std::string getName() {
    return "FrameData";
  }

  virtual void Serialize (JsonSerializer &s);

protected:

  FrameData() {};

private:
  float bpm;
  int id;
  std::string data;

  friend void kurento::Serialize (std::shared_ptr<kurento::module::pulsereader::FrameData> &event, JsonSerializer &s);
};

} /* pulsereader */
} /* module */
} /* kurento */

#endif /*  __FRAME_DATA_HPP__ */
